Prompt: Correzione Logica e Input di LevelUpScreen.tsx
Contesto: Per risolvere il bug per cui le modifiche del level up non vengono applicate e per abilitare i comandi WASD, è necessario riscrivere il componente LevelUpScreen.tsx utilizzando useCallback per stabilizzare le funzioni di gestione e aggiornando la logica di input.

Azione per l'IDE: Sostituisci l'intero contenuto del file src/components/LevelUpScreen.tsx con il seguente codice corretto e completo:

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useGameStore } from '../stores/gameStore';
import { getAvailableLevelUpOptions, createLevelUpPreview, applyLevelUp, updateCharacterSheetAfterLevelUp, getAvailablePoints } from '../rules/levelUpSystem';
import type { ILevelUpOption } from '../interfaces/levelUp';
import { MessageType } from '../data/MessageArchive';

const LevelUpScreen: React.FC = () => {
  const { characterSheet, goBack, addLogEntry, updateCharacterSheet } = useGameStore(state => ({
    characterSheet: state.characterSheet,
    goBack: state.goBack,
    addLogEntry: state.addLogEntry,
    updateCharacterSheet: state.updateCharacterSheet,
  }));

  const [selectedOptions, setSelectedOptions] = useState<ILevelUpOption[]>([]);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [showConfirmation, setShowConfirmation] = useState(false);

  const availableOptions = useMemo(() => getAvailableLevelUpOptions(characterSheet), [characterSheet]);
  const levelUpState = useMemo(() => createLevelUpPreview(characterSheet, selectedOptions), [characterSheet, selectedOptions]);
  const totalPoints = useMemo(() => getAvailablePoints(characterSheet), [characterSheet]);

  const handleToggleOption = useCallback((option: ILevelUpOption) => {
    setSelectedOptions(prevSelected => {
      const isSelected = prevSelected.some(opt => opt.id === option.id);
      if (isSelected) {
        return prevSelected.filter(opt => opt.id !== option.id);
      }
      const newTotalCost = prevSelected.reduce((sum, opt) => sum + opt.cost, 0) + option.cost;
      if (newTotalCost <= totalPoints) {
        return [...prevSelected, option];
      }
      return prevSelected;
    });
  }, [totalPoints]);

  const handleConfirmLevelUp = useCallback(() => {
    const result = applyLevelUp(characterSheet, selectedOptions);
    if (result.success) {
      const updatedSheet = updateCharacterSheetAfterLevelUp(characterSheet, result);
      updateCharacterSheet(updatedSheet);
      addLogEntry(MessageType.LEVEL_UP, { 
        level: result.newLevel,
        statsGained: Object.entries(result.statsGained).map(([stat, value]) => `${stat}: +${value}`).join(', '),
        hpGained: result.hpGained
      });
      if (result.abilitiesGained.length > 0) {
        result.abilitiesGained.forEach(ability => {
          addLogEntry(MessageType.ACTION_SUCCESS, { action: `Nuova abilità acquisita: ${ability}` });
        });
      }
      goBack();
    } else {
      addLogEntry(MessageType.ACTION_FAIL, { reason: result.message });
    }
    setShowConfirmation(false);
  }, [characterSheet, selectedOptions, updateCharacterSheet, addLogEntry, goBack]);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      const key = event.key.toLowerCase();

      if (key === 'escape') {
        event.preventDefault();
        if (showConfirmation) setShowConfirmation(false);
        else goBack();
        return;
      }

      if (showConfirmation) {
        if (key === 'enter' || key === 'y') handleConfirmLevelUp();
        else if (key === 'n') setShowConfirmation(false);
        return;
      }

      if (key === 'arrowup' || key === 'w') setSelectedIndex(prev => Math.max(0, prev - 1));
      else if (key === 'arrowdown' || key === 's') setSelectedIndex(prev => Math.min(availableOptions.length - 1, prev + 1));
      else if (key === 'enter' || key === ' ') handleToggleOption(availableOptions[selectedIndex]);
      else if (key === 'l' && levelUpState.canLevelUp) setShowConfirmation(true);
      else if (key === 'r') setSelectedOptions([]);
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [availableOptions, selectedIndex, showConfirmation, levelUpState.canLevelUp, goBack, handleToggleOption, handleConfirmLevelUp]);

  // ... (Il resto del codice JSX rimane invariato, può copiarlo dal file esistente)
  // Per sicurezza, lo includo qui sotto.

  const getStatColor = (statName: string): string => {
    const currentValue = characterSheet.stats[statName as keyof typeof characterSheet.stats];
    const previewValue = levelUpState.previewStats[statName as keyof typeof levelUpState.previewStats];
    if (previewValue > currentValue) return 'text-green-400';
    return 'text-phosphor-400';
  };

  const isOptionSelected = (option: ILevelUpOption): boolean => selectedOptions.some(opt => opt.id === option.id);
  const canSelectOption = (option: ILevelUpOption): boolean => {
    if (isOptionSelected(option)) return true;
    const currentCost = selectedOptions.reduce((sum, opt) => sum + opt.cost, 0);
    return currentCost + option.cost <= totalPoints;
  };

  if (showConfirmation) {
    return (
      <div className="h-full flex flex-col items-center justify-center p-8 bg-black text-phosphor-500 font-mono">
        <div className="max-w-4xl w-full bg-gray-900 bg-opacity-80 border border-phosphor-500 p-8 rounded-lg">
          <h2 className="text-4xl font-bold mb-6 text-center text-phosphor-400">CONFERMA LEVEL UP</h2>
          <div className="space-y-4 text-xl">
            <p className="text-center text-phosphor-300">Sei sicuro di voler applicare questi miglioramenti?</p>
            <div className="bg-gray-800 bg-opacity-50 p-4 rounded border border-phosphor-600">
              <h3 className="text-phosphor-400 font-bold mb-2">Miglioramenti:</h3>
              {selectedOptions.map(option => <div key={option.id}>• {option.name}</div>)}
            </div>
            <div className="mt-8 text-center text-2xl"><p>[<span className="text-green-400">Y</span>] Conferma | [<span className="text-red-400">N</span>] Annulla</p></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col items-center justify-center p-8 bg-black text-phosphor-500 font-mono">
      <h2 className="text-5xl font-bold mb-8">LEVEL UP</h2>
      <div className="w-full max-w-7xl grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <div className="border p-6">
          <h3 className="text-2xl font-bold mb-4 text-center">STATISTICHE</h3>
          <div className="mb-6 p-4 border rounded">
            <h4 className="font-bold">ESPERIENZA</h4>
            <div className="flex justify-between"><span>Livello:</span><span>{characterSheet.level}</span></div>
            <div className="flex justify-between"><span>XP:</span><span>{characterSheet.experience.currentXP} / {characterSheet.experience.xpForNextLevel}</span></div>
            {characterSheet.experience.canLevelUp && <div className="text-center mt-2 text-green-400 font-bold">✓ PRONTO PER LEVEL UP!</div>}
          </div>
          <div className="space-y-2 text-lg">
            <div className="flex justify-between"><span>Potenza:</span><span className={getStatColor('potenza')}>{levelUpState.previewStats.potenza}</span></div>
            <div className="flex justify-between"><span>Agilità:</span><span className={getStatColor('agilita')}>{levelUpState.previewStats.agilita}</span></div>
            <div className="flex justify-between"><span>Vigore:</span><span className={getStatColor('vigore')}>{levelUpState.previewStats.vigore}</span></div>
            <div className="flex justify-between"><span>Percezione:</span><span className={getStatColor('percezione')}>{levelUpState.previewStats.percezione}</span></div>
            <div className="flex justify-between"><span>Adattamento:</span><span className={getStatColor('adattamento')}>{levelUpState.previewStats.adattamento}</span></div>
            <div className="flex justify-between"><span>Carisma:</span><span className={getStatColor('carisma')}>{levelUpState.previewStats.carisma}</span></div>
            {levelUpState.previewMaxHP > characterSheet.maxHP && <div className="flex justify-between"><span>HP Massimi:</span><span className="text-green-400">{levelUpState.previewMaxHP}</span></div>}
          </div>
        </div>
        <div className="border p-6">
          <h3 className="text-2xl font-bold mb-4 text-center">MIGLIORAMENTI</h3>
          <div className="mb-4 text-center"><span>Punti Disponibili: </span><span className="font-bold text-xl">{levelUpState.availablePoints}</span> / {totalPoints}</div>
          <div className="space-y-2 max-h-96 overflow-y-auto no-scrollbar">
            {availableOptions.map((option, index) => {
              const isSelected = isOptionSelected(option);
              const canSelect = canSelectOption(option);
              return (
                <div key={option.id} className={`p-3 rounded border ${index === selectedIndex ? 'border-phosphor-400 bg-phosphor-400 bg-opacity-20' : isSelected ? 'border-green-400 bg-green-400 bg-opacity-10' : canSelect ? 'border-phosphor-600' : 'border-gray-600 opacity-50'}`}>
                  <div className="flex justify-between"><span className={`font-bold ${isSelected ? 'text-green-400' : canSelect ? 'text-phosphor-300' : 'text-gray-500'}`}>{isSelected ? '✓ ' : ''}{option.name}</span><span className="text-sm px-2 py-1 rounded bg-gray-700">{option.cost} pt</span></div>
                  <p className={`text-sm ${canSelect ? 'text-phosphor-400' : 'text-gray-500'}`}>{option.description}</p>
                </div>
              );
            })}
          </div>
        </div>
        <div className="border p-6">
          <h3 className="text-2xl font-bold mb-4 text-center">SELEZIONI</h3>
          {selectedOptions.length > 0 ? (
            <div className="space-y-2 mb-6">
              {selectedOptions.map(option => <div key={option.id} className="bg-green-400 bg-opacity-10 border border-green-400 p-2 rounded flex justify-between"><span className="text-green-400">{option.name}</span><span>{option.cost} pt</span></div>)}
              <div className="border-t pt-2 mt-4 flex justify-between font-bold"><span>Totale:</span><span>{selectedOptions.reduce((sum, opt) => sum + opt.cost, 0)} pt</span></div>
            </div>
          ) : <div className="text-center italic mb-6">Nessun miglioramento selezionato</div>}
          <div className="space-y-4">
            {levelUpState.canLevelUp && <button className="w-full bg-green-600 hover:bg-green-500 text-white font-bold py-3 px-4 rounded" onClick={() => setShowConfirmation(true)}>[L] LEVEL UP!</button>}
            <button className="w-full bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded" onClick={() => setSelectedOptions([])} disabled={selectedOptions.length === 0}>[R] Reset</button>
          </div>
        </div>
      </div>
      <div className="text-2xl text-center">[↑↓/WS] Naviga | [ENTER/SPAZIO] Seleziona | [L] Level Up | [R] Reset | [ESC] Esci</div>
    </div>
  );
};

export default LevelUpScreen;
